schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  PRODUCT_SUBGRAPH @join__graph(name: "product-subgraph", url: "http://localhost:4003/query")
  REVIEW_SUBGRAPH @join__graph(name: "review-subgraph", url: "http://localhost:4004/query")
  TODO_SUBGRAPH @join__graph(name: "todo-subgraph", url: "http://localhost:4002/query")
  USER_SUBGRAPH @join__graph(name: "user-subgraph", url: "http://localhost:4001/query")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

input LoginInput
  @join__type(graph: USER_SUBGRAPH)
{
  username: String!
  password: String!
}

type LoginOutput
  @join__type(graph: USER_SUBGRAPH)
{
  accessToken: String!
}

type Mutation
  @join__type(graph: PRODUCT_SUBGRAPH)
  @join__type(graph: REVIEW_SUBGRAPH)
  @join__type(graph: TODO_SUBGRAPH)
  @join__type(graph: USER_SUBGRAPH)
{
  createProduct(input: NewProduct!): Product! @join__field(graph: PRODUCT_SUBGRAPH)
  createReview(input: NewReview!): Review! @join__field(graph: REVIEW_SUBGRAPH)
  createTodo(input: NewTodo!): Todo! @join__field(graph: TODO_SUBGRAPH)
  createUser(input: NewUser!): User! @join__field(graph: USER_SUBGRAPH)
}

input NewProduct
  @join__type(graph: PRODUCT_SUBGRAPH)
{
  name: String!
  price: Int!
  description: String
}

input NewReview
  @join__type(graph: REVIEW_SUBGRAPH)
{
  rating: Int!
  comment: String!
  productSku: ID!
}

input NewTodo
  @join__type(graph: TODO_SUBGRAPH)
{
  text: String!
}

input NewUser
  @join__type(graph: USER_SUBGRAPH)
{
  username: String!
  password: String!
  name: String!
  type: UserType!
}

type Product
  @join__type(graph: PRODUCT_SUBGRAPH, key: "sku")
  @join__type(graph: REVIEW_SUBGRAPH, key: "sku", resolvable: false)
{
  sku: ID!
  name: String! @join__field(graph: PRODUCT_SUBGRAPH)
  price: Int! @join__field(graph: PRODUCT_SUBGRAPH)
  description: String! @join__field(graph: PRODUCT_SUBGRAPH)
  reviews: [Review!]! @join__field(graph: PRODUCT_SUBGRAPH)
}

type Query
  @join__type(graph: PRODUCT_SUBGRAPH)
  @join__type(graph: REVIEW_SUBGRAPH)
  @join__type(graph: TODO_SUBGRAPH)
  @join__type(graph: USER_SUBGRAPH)
{
  products: [Product!]! @join__field(graph: PRODUCT_SUBGRAPH)
  myTodos: [Todo!]! @join__field(graph: TODO_SUBGRAPH)
  me: User! @join__field(graph: USER_SUBGRAPH)
  login(input: LoginInput!): LoginOutput! @join__field(graph: USER_SUBGRAPH)
}

type Review
  @join__type(graph: PRODUCT_SUBGRAPH, key: "id", resolvable: false)
  @join__type(graph: REVIEW_SUBGRAPH, key: "id")
{
  id: ID!
  rating: Int! @join__field(graph: REVIEW_SUBGRAPH)
  comment: String! @join__field(graph: REVIEW_SUBGRAPH)
  product: Product! @join__field(graph: REVIEW_SUBGRAPH)
  user: User! @join__field(graph: REVIEW_SUBGRAPH)
}

type Todo
  @join__type(graph: TODO_SUBGRAPH, key: "id")
{
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User
  @join__type(graph: REVIEW_SUBGRAPH, key: "id", resolvable: false)
  @join__type(graph: TODO_SUBGRAPH, key: "id", resolvable: false)
  @join__type(graph: USER_SUBGRAPH, key: "id")
{
  id: ID!
  username: String! @join__field(graph: USER_SUBGRAPH)
  name: String! @join__field(graph: USER_SUBGRAPH)
  type: UserType! @join__field(graph: USER_SUBGRAPH)
}

enum UserType
  @join__type(graph: USER_SUBGRAPH)
{
  ADMIN @join__enumValue(graph: USER_SUBGRAPH)
  USER @join__enumValue(graph: USER_SUBGRAPH)
  GUEST @join__enumValue(graph: USER_SUBGRAPH)
}
