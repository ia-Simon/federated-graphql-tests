package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"errors"
	"log/slog"
	"review-subgraph/graph/model"

	"asap.local/sys-headers/userid"
	"github.com/google/uuid"
)

// CreateReview is the resolver for the createReview field.
func (r *mutationResolver) CreateReview(ctx context.Context, input model.NewReview) (*model.Review, error) {
	if input.Rating < 0 || input.Rating > 5 {
		return nil, errors.New("review rating must be a value between 0 and 5")
	}

	newReview := &model.Review{
		ID:      uuid.NewString(),
		Rating:  input.Rating,
		Comment: input.Comment,
		Product: &model.Product{
			Sku: input.ProductSku,
		},
		User: &model.User{
			ID: userid.FromContext(ctx),
		},
	}

	_, err := r.Datastore.ExecContext(ctx, `
		INSERT INTO "review" ("id", "rating", "comment", "product_sku", "user_id")
		VALUES ($1, $2, $3, $4, $5);`,
		newReview.ID, newReview.Rating, newReview.Comment, newReview.Product.Sku, newReview.User.ID,
	)
	if err != nil {
		slog.Error("failed to persist new review", slog.Any("error", err))
		return nil, errors.New("failed to persist new review")
	}

	return newReview, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
