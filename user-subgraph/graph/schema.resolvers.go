package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"errors"
	"log/slog"
	"user-subgraph/graph/model"

	"asap.local/sys-headers/userid"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	newUser := &model.User{
		ID:   uuid.NewString(),
		Name: input.Name,
		Type: input.Type,
	}

	_, err := r.Datastore.ExecContext(ctx, `
		INSERT INTO "user" ("id", "name", "access_type") 
		VALUES ($1, $2, $3);`,
		newUser.ID, newUser.Name, newUser.Type,
	)
	if err != nil {
		slog.Error("failed to persist new user", slog.Any("error", err))
		return nil, errors.New("failed to persist new user")
	}

	return newUser, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	var self model.User
	err := r.Datastore.QueryRowContext(ctx, `
		SELECT u.id, u.name, u.access_type FROM "user" u
		WHERE u.id = $1;`,
		userid.FromContext(ctx),
	).Scan(&self.ID, &self.Name, &self.Type)
	if err != nil {
		slog.Error("self not found", slog.Any("error", err), slog.String("userID", userid.FromContext(ctx)))
		return nil, errors.New("self not found")
	}

	return &self, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
