package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"errors"
	"log/slog"
	"todo-subgraph/graph/model"

	"asap.local/sys-headers/userid"
	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	newTodo := &model.Todo{
		ID:   uuid.NewString(),
		Text: input.Text,
		Done: false,
		User: &model.User{
			ID: userid.FromContext(ctx),
		},
	}

	_, err := r.Datastore.ExecContext(ctx, `
		INSERT INTO "todo" ("id", "text_data", "is_done", "user_id") 
		VALUES ($1, $2, $3, $4);`,
		newTodo.ID, newTodo.Text, newTodo.Done, userid.FromContext(ctx),
	)
	if err != nil {
		slog.Error("failed to persist new todo", slog.Any("error", err))
		return nil, errors.New("failed to persist new todo")
	}

	return newTodo, nil
}

// MyTodos is the resolver for the myTodos field.
func (r *queryResolver) MyTodos(ctx context.Context) ([]*model.Todo, error) {
	rows, err := r.Datastore.QueryContext(ctx, `
		SELECT t.id, t.text_data, t.is_done, t.user_id FROM "todo" t
		WHERE t.user_id = $1`,
		userid.FromContext(ctx),
	)
	if err != nil {
		slog.Error("failed to query self todos", slog.Any("error", err))
		return nil, errors.New("failed to retrieve self todos")
	}

	var todos []*model.Todo
	for rows.Next() {
		todo := &model.Todo{
			User: new(model.User),
		}
		err := rows.Scan(&todo.ID, &todo.Text, &todo.Done, &todo.User.ID)
		if err != nil {
			slog.Warn("failed to scan row from result", slog.Any("error", err))
			continue
		}
		todos = append(todos, todo)
	}
	if err = rows.Err(); err != nil {
		slog.Warn("rows iteration finished with error", slog.Any("error", err))
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
